#include "Stopwatch.hpp" // biblioteca pro cronometro
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

#define v 0       // vazio
#define p 1       // parede
#define s 2       // saída
#define comida 3  // comida

int pontos = 0, linha = 1, coluna = 1;
using namespace std;

const int FASES = 2;
int mapas[FASES][30][30] = {
    {
    // FASE 0 (original)
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,3,0,0,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1},
    {1,0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,3,1},
    {1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1},
    {1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1},  
    {1,0,0,0,0,3,1,0,1,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1},
    {1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1},
    {1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1},
    {1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,3,1,0,1,0,0,0,0,3,1,0,1},
    {1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1},
    {1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1},
    {1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1},
    {1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,0,1,1,1,3,0,1,1,0,1,1},
    {1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1},
    {1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1},
    {1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1},
    {1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1},
    {1,0,0,0,0,3,1,0,0,0,1,0,1,1,1,0,1,3,1,0,0,0,1,0,1,3,1,0,0,1},
    {1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,3,1,0,1,0,1,0,1,0,1,1,1,0,1,1},
    {1,3,0,0,1,0,0,0,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,1},
    {1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1},
    {1,0,1,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1},
    {1,0,1,1,1,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1},
    {1,1,1,0,1,0,0,0,3,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1},
    {1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,1},
    {1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,3,1},
    {1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    },
    {
        // FASE 1
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
        
    }
};

// --- PROTÓTIPOS ---
void jogar(int fase);
void monta_mapa(int mapa[30][30]);
int escolher_fase();
int menu();

// --- FUNÇÕES ---

int escolher_fase() {
    int fase;
    cout << "Escolha a fase (0 a " << FASES - 1 << "): ";
    cin >> fase;
    if (fase >= 0 && fase < FASES) {
        return fase;
    } else {
        cout << "Fase inválida!\n";
        return escolher_fase();
    }
}

int menu() {
    system("color 0F");
    int escolha;
    cout << "Menu de opcoes" << endl;
    cout << "1. Jogar" << endl;
    cout << "2. Ver pontuacao" << endl;
    cout << "3. Sair" << endl;
    cout << "Escolha uma opcao: ";
    cin >> escolha;
    switch (escolha) {
    case 1:
        system("cls");
        pontos = 0;  // reinicia pontos
        linha = 1; coluna = 1;
        jogar(escolher_fase());
        break;
    case 2:
        cout << "Pontuacao atual: " << pontos << endl;
        system("pause");
        system("cls");
        return menu();
    case 3:
        cout << "Saindo do jogo..." << endl;
        system("pause");
        system("cls");
        return 0;
    default:
        cout << "Opcao invalida." << endl;
        system("pause");
        system("cls");
        return menu();
    }
    return 0;
}

void monta_mapa(int mapa[30][30]) {
    for (int l = 0; l < 30; l++) {
        for (int c = 0; c < 30; c++) {
            if (l == linha && c == coluna) printf(":)");
            else {
                if (mapa[l][c] == v) printf("  ");
                if (mapa[l][c] == s) printf("##");
                if (mapa[l][c] == p) printf("%c%c", 219, 219);
                if (mapa[l][c] == comida) printf("**");
            }
        }
        printf("\n");
    }
    printf("\n\n");
}

void jogar(int fase) {
    int mapa[30][30];
    for (int i = 0; i < 30; i++)
        for (int j = 0; j < 30; j++)
            mapa[i][j] = mapas[fase][i][j];

    int key, saiu = 0;
    namespace sw = stopwatch;
    sw::Stopwatch my_watch;
    my_watch.start();
    system("color 0A");

    monta_mapa(mapa);

    while (saiu == 0) {
        key = getch();
        if (key == 'w' || key == 'W') {
            linha--;
            if (mapa[linha][coluna] == p) linha++;
            if (mapa[linha][coluna] == comida) {
                pontos++;
                mapa[linha][coluna] = v;
            }
        }
        if (key == 'a' || key == 'A') {
            coluna--;
            if (mapa[linha][coluna] == p) coluna++;
            if (mapa[linha][coluna] == comida) {
                pontos++;
                mapa[linha][coluna] = v;
            }
        }
        if (key == 's' || key == 'S') {
            linha++;
            if (mapa[linha][coluna] == p) linha--;
            if (mapa[linha][coluna] == comida) {
                pontos++;
                mapa[linha][coluna] = v;
            }
        }
        if (key == 'd' || key == 'D') {
            coluna++;
            if (mapa[linha][coluna] == p) coluna--;
            if (mapa[linha][coluna] == comida) {
                pontos++;
                mapa[linha][coluna] = v;
            }
        }
        if (mapa[linha][coluna] == s) saiu++;
        system("cls");
        monta_mapa(mapa);
    }

    system("cls");
    printf("Voce conseguiu sair do labirinto! Voce fez %d pontos.\n", pontos);
    system("pause");

    std::uint64_t elapsed_s = my_watch.elapsed<sw::seconds>();
    std::uint64_t minutes = elapsed_s / 60;
    std::uint64_t seconds = elapsed_s % 60;
    std::cout << "Tempo decorrido: " << minutes << " minutos e " << seconds << " segundos" << std::endl;

    menu();
}

int main() {
    menu();
    return 0;
}
