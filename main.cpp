#include "Stopwatch.hpp" // biblioteca pro cronometro
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h> // Para gerar números aleatórios
#include <vector>
#include <iomanip>






#define v 0       // vazio
#define p 1       // paredes
#define s 2       // saída
#define comida 3  // comida
#define inimigo 4 // inimigo (novo)

int pontos = 0, linha = 1, coluna = 1;
using namespace std;



// Estrutura dos dados da partida
struct Partida {
    int fase;
    int pontos;
    uint16_t minutos;
    uint16_t segundos;
};

//Vector para guardar todas as partidas
vector<Partida> historicoPartidas; 




// estrutura para armazenar posições dos inimigos
struct Inimigo
{
    int linha;
    int coluna;
};

const int FASES = 5;  // número de fases
const int NUM_INIMIGOS = 6;     // número de inimigos por fase
Inimigo inimigos[NUM_INIMIGOS]; // Array para armazenar inimigos

int mapas[FASES][30][30] = {
    {// FASE 0 (modificada para incluir inimigos)
     {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
     {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1},
     {1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1},
     {1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 3, 1},
     {1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1},
     {1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1},
     {1, 0, 0, 0, 0, 3, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1},
     {1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1},
     {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1},
     {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 3, 1, 0, 1},
     {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1},
     {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1},
     {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
     {1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
     {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
     {1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 3, 0, 1, 1, 0, 1, 1},
     {1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1},
     {1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1},
     {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
     {1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1},
     {1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 0, 0, 0, 1, 0, 1, 3, 1, 0, 0, 1},
     {1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1},
     {1, 3, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1},
     {1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1},
     {1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1},
     {1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1},
     {1, 1, 1, 0, 1, 0, 0, 0, 3, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1},
     {1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1},
     {1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 1},
     {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
    {// FASE 1
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1},
    {1 ,0 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,3 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1},
    {1 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,3 ,0 ,0 ,1 ,1},
    {1 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1},
    {1 ,0 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,3 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,3 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,0 ,1},
    {1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,0 ,1},
    {1 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,0, 1, 1, 1 ,1 ,0 ,0 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,0 ,1},
    {1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,0 ,1 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,3 ,0 ,1},
    {1 ,0 ,1 ,0 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1},
    {1 ,0 ,1 ,0 ,1 ,1 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,0 ,0 ,3 ,1 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,1 ,3 ,0 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1},
    {1 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,3 ,0 ,0 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,0 ,0 ,1},
    {1 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,1},
    {1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1},
    {1 ,0 ,1 ,0 ,1 ,0 ,1 ,3 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1},
    {1 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,3 ,1},
    {1 ,1 ,1 ,1 ,1 ,0 ,0, 0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1},
    {1 ,0 ,0 ,3 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1},
    {1 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,1},
    {1 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,1},
    {1 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,1 ,0 ,1},
    {1 ,0 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,0 ,1},
    {1 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,0 ,0 ,0 ,1},
    {1 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0 ,1},
    {1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,2 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1}  
    },
    {// FASE 2
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,3,1},
    {1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1},
    {1,3,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1},
    {1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1},
    {1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1},
    {1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1},
    {1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1},
    {1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1},
    {1,0,1,0,1,3,0,0,0,0,0,0,1,3,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1},
    {1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1},
    {1,3,0,0,1,0,1,0,1,0,0,0,0,0,3,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1},
    {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1},
    {1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1},
    {1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,0,0,3,0,1,0,1,0,1,1,1,0,1,0,3,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1},
    {1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1},
    {1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1},
    {1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1},
    {1,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1},
    {1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,3,0,1,0,0,0,1},
    {1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    },
    {//FASE 3
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,3,0,0,0,0,0,0,0,0,1},
    {1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1},
    {1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1},
    {1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1},
    {1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1},
    {1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1},
    {1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1},
    {1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1},
    {1,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1},
    {1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1},
    {1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,3,1,0,0,0,0,0,1,3,0,0,1},
    {1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1},
    {1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1},
    {1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,3,0,1},
    {1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1},
    {1,0,1,3,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1},
    {1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1},
    {1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1},
    {1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,3,1,0,1},
    {1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1},
    {1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    },
    {// FASE 4
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {1,0,0,0,1,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1},
    {1,0,1,0,3,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,3,1,0,1,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1},
    {1,0,0,0,0,0,0,1,0,0,0,1,0,3,0,1,0,0,0,1,0,3,0,1,0,1,0,1,0,1},
    {1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1},
    {1,0,0,3,0,0,0,3,0,1,0,0,0,0,0,0,3,1,0,0,0,0,0,1,0,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1},
    {1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1},
    {1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,3,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1},
    {1,0,0,3,0,1,0,1,0,0,0,0,3,0,0,1,0,0,0,1,0,3,0,1,0,0,0,0,0,1},
    {1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,3,1},
    {1,0,0,0,3,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,3,0,0,0,3,0,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,3,1,0,1,0,0,0,1,0,0,0,0,3,0,0,1,0,0,0,1,0,0,0,1,0,1},
    {1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1},
    {1,0,0,0,0,0,3,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,3,0,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
    {1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1},
    {1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1},
    {1,0,0,3,0,0,0,0,0,1,0,0,0,1,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,1},
    {1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1},
    {1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,3,0,1,0,1},
    {1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,3,1},
    {1,0,0,0,3,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,3,0,0,0,1},
    {1,0,1,1,1,1,1,1,0,1,1,1,0,1,3,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    }
};

// --- PROTÓTIPOS ---
void jogar(int fase);
void monta_mapa(int mapa[30][30]);
int escolher_fase();
int menu();
void inicializar_inimigos(int mapa[30][30]);
void mover_inimigos(int mapa[30][30]);

// --- FUNÇÕES ---

void mostrar_pontuacoes(){
    if(historicoPartidas.empty()){
        cout << "Nenhuma partida resgistrada ainda. \n";
        return;
    }

    //cabeçalho da tabela
    cout << "\nHistórico de Partidas:\n";
    cout << "+-------+---------+----------------+\n";
    cout << "| Fase  | Pontos  | Tempo (m:s)    |\n";
    cout << "+-------+---------+----------------+\n";

    //Mostrar dados das partidas
    for(const auto& partida : historicoPartidas){
        cout << "| " << setw(5) << partida.fase << " | "
             << setw(7) << partida.pontos << " | "
             << setw(2) << partida.minutos << "m " 
             << setw(2) << partida.segundos << "s      |\n";
    }
    cout << "+-------+---------+----------------+\n";

}

void inicializar_inimigos(int mapa[30][30])
{
    srand(time(NULL)); // inimigo aparece em lugares randoms
    for (int i = 0; i < NUM_INIMIGOS; i++)
    {
        int l, c;
        bool posicaoValida;
        do
        {
            posicaoValida = true;

            l = rand() % 28 + 1;
            c = rand() % 28 + 1;

            if (mapa[l][c] == v)
            {
                posicaoValida = false;
            }

            int distancia = abs(l - linha) + abs(c - coluna);

            if (distancia < 5)
            {
                posicaoValida = false;
            }
        } while (!posicaoValida);

        inimigos[i].coluna = c;
        inimigos[i].linha = l;

        mapa[l][c] = inimigo; // coloca o inimigo no mapa
    }
}

void mover_inimigos(int mapa[30][30])
{
    for (int i = 0; i < NUM_INIMIGOS; i++)
    {
        /*Movimentação do Inimigo*/

        int nova_linha;  // Variável auxiliar Linha
        int nova_coluna; // Variável auxiliar coluna

        do
        {
            nova_linha = inimigos[i].linha;
            nova_coluna = inimigos[i].coluna;

            int direcao = rand() % 4; // Quatro possiveis movimentacoes;

            if (direcao == 0)
            {
                nova_linha--; // Inimigo se move para cima
            }
            else if (direcao == 1)
            {
                nova_linha++; // Inimigo se move para baixo
            }
            else if (direcao == 2)
            {
                nova_coluna--; // Inimigo se move para esquerda;
            }
            else if (direcao == 3)
            {
                nova_coluna++; // Inimigo se move para a direita;
            }
        } while (nova_linha <= 0 || nova_linha >= 29 || nova_coluna <= 0 || nova_coluna >= 29 || mapa[nova_linha][nova_coluna] == p); // Faz enquanto não for uma posição válida

        mapa[inimigos[i].linha][inimigos[i].coluna] = v;
        inimigos[i].linha = nova_linha;
        inimigos[i].coluna = nova_coluna;
        mapa[inimigos[i].linha][inimigos[i].coluna] = inimigo;
    }
}

int escolher_fase(){
    int fase;
    cout << "Escolha a fase (0 a " << FASES - 1 << "): ";
    cin >> fase;
    if (fase >= 0 && fase < FASES)
    {
        switch (fase){
        case 0:                   
            system("color 0F");  // branco
            return fase;
        case 1:
            system("color 0C");  // vermelho
            return fase;
        case 2:
            system("color 0A");
            return fase;  // verde
        case 3:
            system("color 0D");  // roxo
            return fase;
        case 4:
            system("color 09");  // azul
            return fase;
        }  
    }  // adiciona uma case nova para cada fase que acrescentar
    else
    {
        cout << "Fase inválida!\n";
        return escolher_fase();
    }
}

int menu()
{
    system("color 0F");
    int escolha;
    cout << "Menu de opcoes" << endl;
    cout << "1. Jogar" << endl;
    cout << "2. Ver partidas" << endl;
    cout << "3. Sair" << endl;
    cout << "Escolha uma opcao: ";
    cin >> escolha;
    switch (escolha)
    {
    case 1:
        system("cls");
        pontos = 0; // reinicia pontos
        linha = 1;
        coluna = 1;
        jogar(escolher_fase());
        break;
    case 2:
        system("cls");
        mostrar_pontuacoes();
        system("pause");
        system("cls");
        return menu();
    case 3:
        cout << "Saindo do jogo..." << endl;
        system("pause");
        system("cls");
        return 0;
    default:
        cout << "Opcao invalida." << endl;
        system("pause");
        system("cls");
        return menu();
    }
    return 0;
}

void monta_mapa(int mapa[30][30])
{
    for (int l = 0; l < 30; l++)
    {
        for (int c = 0; c < 30; c++)
        {
            if (l == linha && c == coluna)
                printf(":)");
            else
            {
                if (mapa[l][c] == v)
                    printf("  ");
                if (mapa[l][c] == s)
                    printf("##");
                if (mapa[l][c] == p)
                    printf("%c%c", 219, 219);
                if (mapa[l][c] == comida)
                    printf("**");
                if (mapa[l][c] == inimigo)
                    printf("EE"); // exibe o inimigo, E para Enemy
            }
        }
        printf("\n");
    }
    printf("\n\n");
}

void jogar(int fase)
{
    int mapa[30][30];
    for (int i = 0; i < 30; i++)
        for (int j = 0; j < 30; j++)
            mapa[i][j] = mapas[fase][i][j];

    int key, saiu = 0, game_over = 0;
    namespace sw = stopwatch;
    sw::Stopwatch my_watch;
    my_watch.start();

    inicializar_inimigos(mapa); // inicializa os inimigos
    monta_mapa(mapa);

    while (saiu == 0 && game_over == 0)
    {
        key = getch();
        int nova_linha = linha, nova_coluna = coluna;

        if (key == 'w' || key == 'W')
            nova_linha--;
        if (key == 'a' || key == 'A')
            nova_coluna--;
        if (key == 's' || key == 'S')
            nova_linha++;
        if (key == 'd' || key == 'D')
            nova_coluna++;

        // verifica se o movimento do jogador é válido
        if (mapa[nova_linha][nova_coluna] != p)
        {
            linha = nova_linha;
            coluna = nova_coluna;
            if (mapa[linha][coluna] == comida)
            {
                pontos++;
                mapa[linha][coluna] = v;
            }
            if (mapa[linha][coluna] == inimigo)
            {
                game_over = 1; // adicionei caso colisão com inimigo
            }
            if (mapa[linha][coluna] == s)
                saiu++;
        }

        // move os inimigos
        mover_inimigos(mapa);

        // verifica se algum inimigo está na posição do jogador após o movimento
        for (int i = 0; i < NUM_INIMIGOS; i++)
        {
            if (inimigos[i].linha == linha && inimigos[i].coluna == coluna)
            {
                game_over = 1;
            }
        }

        system("cls");
        monta_mapa(mapa);
    }

    system("cls");
    if (game_over)
    {
        printf("Game Over! Você foi pego por um inimigo! Pontuação: %d\n", pontos);
    }
    else
    {
        printf("Você conseguiu sair do labirinto! Pontuação: %d\n", pontos);
    }
    system("pause");

    std::uint64_t elapsed_s = my_watch.elapsed<sw::seconds>();
    std::uint64_t minutes = elapsed_s / 60;
    std::uint64_t seconds = elapsed_s % 60;
    std::cout << "Tempo decorrido: " << minutes << " minutos e " << seconds << " segundos" << std::endl;

    //Armazenar os dados da partida atual
    Partida partidaAtual;
    partidaAtual.fase = fase;
    partidaAtual.pontos = pontos;
    partidaAtual.minutos = minutes;
    partidaAtual.segundos = seconds;
    historicoPartidas.push_back(partidaAtual);

    menu();
}

int main()
{
    srand(time(NULL));
    menu();
    return 0;
}